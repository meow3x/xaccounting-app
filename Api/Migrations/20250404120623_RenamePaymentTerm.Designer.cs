// <auto-generated />
using Api.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Api.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250404120623_RenamePaymentTerm")]
    partial class RenamePaymentTerm
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Api.Entities.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("accountid");

                    b.Property<int>("AccountTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("accounttypeid");

                    b.Property<decimal>("Balance")
                        .HasColumnType("numeric")
                        .HasColumnName("balance");

                    b.Property<decimal>("Credit")
                        .HasColumnType("numeric")
                        .HasColumnName("credit");

                    b.Property<decimal>("Debit")
                        .HasColumnType("numeric")
                        .HasColumnName("debit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<decimal>("YearEndBudget")
                        .HasColumnType("numeric")
                        .HasColumnName("yearendbudget");

                    b.HasKey("Id")
                        .HasName("pk_accounts");

                    b.HasIndex("AccountId")
                        .IsUnique()
                        .HasDatabaseName("ix_accounts_accountid");

                    b.HasIndex("AccountTypeId")
                        .HasDatabaseName("ix_accounts_accounttypeid");

                    b.ToTable("accounts", (string)null);
                });

            modelBuilder.Entity("Api.Entities.AccountType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Label")
                        .HasColumnType("text")
                        .HasColumnName("label");

                    b.HasKey("Id")
                        .HasName("pk_accounttypes");

                    b.ToTable("accounttypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Label = "Cash"
                        },
                        new
                        {
                            Id = 2,
                            Label = "Bank"
                        },
                        new
                        {
                            Id = 3,
                            Label = "Trade Receivable"
                        },
                        new
                        {
                            Id = 4,
                            Label = "Non-Trade Receivable"
                        },
                        new
                        {
                            Id = 5,
                            Label = "Material"
                        },
                        new
                        {
                            Id = 6,
                            Label = "Inventory"
                        },
                        new
                        {
                            Id = 7,
                            Label = "Properties"
                        },
                        new
                        {
                            Id = 8,
                            Label = "Accumulated Depreciation"
                        },
                        new
                        {
                            Id = 9,
                            Label = "Other Current Assets"
                        },
                        new
                        {
                            Id = 10,
                            Label = "Other Non-Current Assets"
                        },
                        new
                        {
                            Id = 11,
                            Label = "Payable"
                        },
                        new
                        {
                            Id = 12,
                            Label = "Other Current Liabilities"
                        },
                        new
                        {
                            Id = 13,
                            Label = "Other Non-Current Liabilities"
                        },
                        new
                        {
                            Id = 14,
                            Label = "Capital"
                        },
                        new
                        {
                            Id = 15,
                            Label = "Sales"
                        },
                        new
                        {
                            Id = 16,
                            Label = "Sales Discount"
                        },
                        new
                        {
                            Id = 17,
                            Label = "Expenses"
                        });
                });

            modelBuilder.Entity("Api.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("CreditLimit")
                        .HasColumnType("numeric")
                        .HasColumnName("creditlimit");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("customerid");

                    b.Property<decimal?>("Discount")
                        .HasColumnType("numeric")
                        .HasColumnName("discount");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int?>("PaymentTermId")
                        .HasColumnType("integer")
                        .HasColumnName("paymenttermid");

                    b.Property<string>("Tin")
                        .HasColumnType("text")
                        .HasColumnName("tin");

                    b.HasKey("Id")
                        .HasName("pk_customers");

                    b.HasIndex("CustomerId")
                        .IsUnique()
                        .HasDatabaseName("ix_customers_customerid");

                    b.HasIndex("PaymentTermId")
                        .HasDatabaseName("ix_customers_paymenttermid");

                    b.ToTable("customers", (string)null);
                });

            modelBuilder.Entity("Api.Entities.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("categoryid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("code");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("name");

                    b.Property<decimal>("Reorder")
                        .HasColumnType("numeric")
                        .HasColumnName("reorder");

                    b.Property<decimal>("UnitCost")
                        .HasColumnType("numeric")
                        .HasColumnName("unitcost");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("numeric")
                        .HasColumnName("unitprice");

                    b.Property<int>("UomId")
                        .HasColumnType("integer")
                        .HasColumnName("uomid");

                    b.Property<decimal>("Wholesale")
                        .HasColumnType("numeric")
                        .HasColumnName("wholesale");

                    b.HasKey("Id")
                        .HasName("pk_items");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_items_categoryid");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ix_items_code");

                    b.HasIndex("UomId")
                        .HasDatabaseName("ix_items_uomid");

                    b.ToTable("items", (string)null);
                });

            modelBuilder.Entity("Api.Entities.ItemCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_itemcategories");

                    b.ToTable("itemcategories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Electrical"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Office Equipment"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Tools and Equipment"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Motorpool"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Plumbing"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Finishing & Paintings"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Masonry"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Metals"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Woods & Plastics"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Consumables"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Doors & Windows"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Office Supplies"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Furniture & Fixture"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Services"
                        });
                });

            modelBuilder.Entity("Api.Entities.PaymentTerm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("label");

                    b.HasKey("Id")
                        .HasName("pk_paymentterms");

                    b.ToTable("paymentterms", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Label = "Cash"
                        },
                        new
                        {
                            Id = 2,
                            Label = "7 days"
                        },
                        new
                        {
                            Id = 3,
                            Label = "30 Days"
                        },
                        new
                        {
                            Id = 4,
                            Label = "120 Day"
                        },
                        new
                        {
                            Id = 5,
                            Label = "COD"
                        });
                });

            modelBuilder.Entity("Api.Entities.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("CreditLimit")
                        .HasColumnType("numeric")
                        .HasColumnName("creditlimit");

                    b.Property<decimal?>("Discount")
                        .HasColumnType("numeric")
                        .HasColumnName("discount");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int?>("PaymentTermId")
                        .HasColumnType("integer")
                        .HasColumnName("paymenttermid");

                    b.Property<string>("SupplierId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("supplierid");

                    b.Property<string>("Tin")
                        .HasColumnType("text")
                        .HasColumnName("tin");

                    b.HasKey("Id")
                        .HasName("pk_suppliers");

                    b.HasIndex("PaymentTermId")
                        .HasDatabaseName("ix_suppliers_paymenttermid");

                    b.HasIndex("SupplierId")
                        .IsUnique()
                        .HasDatabaseName("ix_suppliers_supplierid");

                    b.ToTable("suppliers", (string)null);
                });

            modelBuilder.Entity("Api.Entities.UnitOfMeasurement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_unitofmeasurements");

                    b.ToTable("unitofmeasurements", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "bag"
                        },
                        new
                        {
                            Id = 2,
                            Name = "bags"
                        },
                        new
                        {
                            Id = 3,
                            Name = "bottle"
                        },
                        new
                        {
                            Id = 4,
                            Name = "box"
                        },
                        new
                        {
                            Id = 5,
                            Name = "can"
                        },
                        new
                        {
                            Id = 6,
                            Name = "cu"
                        },
                        new
                        {
                            Id = 7,
                            Name = "cubic meter"
                        },
                        new
                        {
                            Id = 8,
                            Name = "dumptruck"
                        },
                        new
                        {
                            Id = 9,
                            Name = "elf"
                        },
                        new
                        {
                            Id = 10,
                            Name = "gallon"
                        },
                        new
                        {
                            Id = 11,
                            Name = "half elf"
                        },
                        new
                        {
                            Id = 12,
                            Name = "kilo"
                        },
                        new
                        {
                            Id = 13,
                            Name = "liter"
                        },
                        new
                        {
                            Id = 14,
                            Name = "meter"
                        },
                        new
                        {
                            Id = 15,
                            Name = "pad"
                        },
                        new
                        {
                            Id = 16,
                            Name = "pail"
                        },
                        new
                        {
                            Id = 17,
                            Name = "pair"
                        },
                        new
                        {
                            Id = 18,
                            Name = "piece"
                        },
                        new
                        {
                            Id = 19,
                            Name = "roll"
                        },
                        new
                        {
                            Id = 20,
                            Name = "sack"
                        },
                        new
                        {
                            Id = 21,
                            Name = "set"
                        },
                        new
                        {
                            Id = 22,
                            Name = "tin"
                        },
                        new
                        {
                            Id = 23,
                            Name = "tube"
                        },
                        new
                        {
                            Id = 24,
                            Name = "unit"
                        });
                });

            modelBuilder.Entity("Api.Entities.Account", b =>
                {
                    b.HasOne("Api.Entities.AccountType", "AccountType")
                        .WithMany()
                        .HasForeignKey("AccountTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_accounts_accounttypes_accounttypeid");

                    b.Navigation("AccountType");
                });

            modelBuilder.Entity("Api.Entities.Customer", b =>
                {
                    b.HasOne("Api.Entities.PaymentTerm", "PaymentTerm")
                        .WithMany()
                        .HasForeignKey("PaymentTermId")
                        .HasConstraintName("fk_customers_paymentterms_paymenttermid");

                    b.OwnsOne("Api.Entities.Address", "Address", b1 =>
                        {
                            b1.Property<int>("CustomerId")
                                .HasColumnType("integer")
                                .HasColumnName("id");

                            b1.Property<string>("City")
                                .HasColumnType("text")
                                .HasColumnName("address_city");

                            b1.Property<string>("LandlineNumber")
                                .HasColumnType("text")
                                .HasColumnName("address_landlinenumber");

                            b1.Property<string>("MobileNumber")
                                .HasColumnType("text")
                                .HasColumnName("address_mobilenumber");

                            b1.Property<string>("Province")
                                .HasColumnType("text")
                                .HasColumnName("address_province");

                            b1.Property<string>("Street")
                                .HasColumnType("text")
                                .HasColumnName("address_street");

                            b1.HasKey("CustomerId");

                            b1.ToTable("customers");

                            b1.WithOwner()
                                .HasForeignKey("CustomerId")
                                .HasConstraintName("fk_customers_customers_id");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("PaymentTerm");
                });

            modelBuilder.Entity("Api.Entities.Item", b =>
                {
                    b.HasOne("Api.Entities.ItemCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_items_itemcategories_categoryid");

                    b.HasOne("Api.Entities.UnitOfMeasurement", "Uom")
                        .WithMany()
                        .HasForeignKey("UomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_items_unitofmeasurements_uomid");

                    b.Navigation("Category");

                    b.Navigation("Uom");
                });

            modelBuilder.Entity("Api.Entities.Supplier", b =>
                {
                    b.HasOne("Api.Entities.PaymentTerm", "PaymentTerm")
                        .WithMany()
                        .HasForeignKey("PaymentTermId")
                        .HasConstraintName("fk_suppliers_paymentterms_paymenttermid");

                    b.OwnsOne("Api.Entities.Address", "Address", b1 =>
                        {
                            b1.Property<int>("SupplierId")
                                .HasColumnType("integer")
                                .HasColumnName("id");

                            b1.Property<string>("City")
                                .HasColumnType("text")
                                .HasColumnName("address_city");

                            b1.Property<string>("LandlineNumber")
                                .HasColumnType("text")
                                .HasColumnName("address_landlinenumber");

                            b1.Property<string>("MobileNumber")
                                .HasColumnType("text")
                                .HasColumnName("address_mobilenumber");

                            b1.Property<string>("Province")
                                .HasColumnType("text")
                                .HasColumnName("address_province");

                            b1.Property<string>("Street")
                                .HasColumnType("text")
                                .HasColumnName("address_street");

                            b1.HasKey("SupplierId");

                            b1.ToTable("suppliers");

                            b1.WithOwner()
                                .HasForeignKey("SupplierId")
                                .HasConstraintName("fk_suppliers_suppliers_id");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("PaymentTerm");
                });
#pragma warning restore 612, 618
        }
    }
}
